1)Which product has the highest price? Only return a single row?

    SELECT *
    FROM products
    WHERE price =
    (
        SELECT MAX(price) FROM products
    );

| product_id | product_name | price |
| ---------- | ------------ | ----- |
| 13         | Product M    | 70.00 |

---

2)Which customer has made the most orders?

    SELECT customer_id,
           customer_name
    FROM
      (SELECT first_name||' ' || last_name AS customer_name,
              customer_id,
              COUNT(a.customer_id) AS maximum_orders,
              DENSE_RANK() OVER(
                                ORDER BY COUNT(a.customer_id) DESC) AS RESULT
       FROM orders a
       INNER JOIN customers b USING(customer_id)
       GROUP BY 1,2
       ORDER BY 2 DESC) c
    WHERE RESULT = 1
    ORDER BY 1;

| customer_id | customer_name |
| ----------- | ------------- |
| 1           | John Doe      |
| 2           | Jane Smith    |
| 3           | Bob Johnson   |

---

3)What’s the total revenue per product?

    SELECT product_name,
           SUM(quantity*price) AS Total_revenue
    FROM products a
    INNER JOIN order_items b USING(product_id)
    GROUP BY 1
    ORDER BY 1;

| product_name | total_revenue |
| ------------ | ------- |
| Product A    | 50.00   |
| Product B    | 135.00  |
| Product C    | 160.00  |
| Product D    | 75.00   |
| Product E    | 90.00   |
| Product F    | 210.00  |
| Product G    | 120.00  |
| Product H    | 135.00  |
| Product I    | 150.00  |
| Product J    | 330.00  |
| Product K    | 180.00  |
| Product L    | 195.00  |
| Product M    | 420.00  |

---

4)Find the day with the highest revenue?

    SELECT "day",
           revenue AS Total_revenue
    FROM
      (SELECT to_char(order_date, 'Day') AS "day",
              SUM(quantity*price) AS revenue,
              DENSE_RANK() OVER(
                                ORDER BY SUM(quantity*price) DESC) AS rn
       FROM orders a
       INNER JOIN order_items b USING(order_id)
       INNER JOIN products c ON b.product_id = c.product_id
       GROUP BY 1
       ORDER BY 2 DESC) AS c
    WHERE rn=1;

| day       | total_revenue |
| --------- | ------------- |
| Tuesday   | 555.00        |

---


---
5)Find the first order (by date) for each customer?

    WITH a1 AS
      (SELECT *,
              ROW_NUMBER() OVER(PARTITION BY customer_id
                                ORDER BY customer_id, order_date) AS rn
       FROM orders a
       INNER JOIN customers b USING(customer_id)
       ORDER BY customer_id,
                order_date)
    SELECT first_name||' '||last_name AS full_name,
           order_date AS first_orderdate
    FROM a1
    WHERE rn=1;

| full_name        | first_orderdate          |
| ---------------- | ------------------------ |
| John Doe         | 2023-05-01T00:00:00.000Z |
| Jane Smith       | 2023-05-02T00:00:00.000Z |
| Bob Johnson      | 2023-05-03T00:00:00.000Z |
| Alice Brown      | 2023-05-07T00:00:00.000Z |
| Charlie Davis    | 2023-05-08T00:00:00.000Z |
| Eva Fisher       | 2023-05-09T00:00:00.000Z |
| George Harris    | 2023-05-10T00:00:00.000Z |
| Ivy Jones        | 2023-05-11T00:00:00.000Z |
| Kevin Miller     | 2023-05-12T00:00:00.000Z |
| Lily Nelson      | 2023-05-13T00:00:00.000Z |
| Oliver Patterson | 2023-05-14T00:00:00.000Z |
| Quinn Roberts    | 2023-05-15T00:00:00.000Z |
| Sophia Thomas    | 2023-05-16T00:00:00.000Z |

---
6) Find the top 3 customers who have ordered the most distinct products?

    SELECT full_name AS customer_name
    FROM
      (SELECT first_name||' '||last_name AS full_name,
              COUNT(DISTINCT product_name),
              DENSE_RANK() OVER(
                                ORDER BY COUNT(DISTINCT product_name) DESC) AS rank
       FROM orders a
       INNER JOIN order_items b USING(order_id)
       INNER JOIN products c USING(product_id)
       INNER JOIN customers d USING(customer_id)
       GROUP BY 1
       ORDER BY 2 DESC) e
    WHERE rank = 1;

| customer_name |
| ------------- |
| John Doe      |
| Bob Johnson   |
| Jane Smith    |

---

7)Which product has been bought the least in terms of quantity?


    WITH a1 AS
      (SELECT product_name,
              SUM(quantity) AS Quantity,
              DENSE_RANK() OVER(
                                ORDER BY SUM(quantity)) AS rank
       FROM orders a
       INNER JOIN order_items b USING(order_id)
       INNER JOIN products USING(product_id)
       GROUP BY 1
       ORDER BY 2)
    SELECT product_name
    FROM a1
    WHERE rank=1
    ORDER BY 1;

| product_name |
| ------------ |
| Product D    |
| Product E    |
| Product G    |
| Product H    |
| Product I    |
| Product K    |
| Product L    |

---

8)What is the median order total?


    WITH a1 AS
      (SELECT order_id,
              SUM(quantity*price) AS total
       FROM order_items a
       INNER JOIN products b USING(product_id)
       GROUP BY 1
       ORDER BY 1)
    SELECT PERCENTILE_CONT(0.5) WITHIN GROUP(
                                             ORDER BY total) AS median_order_total
    FROM a1;

| median_order_total |
| ------------------ |
| 112.5              |

---

9)For each order, determine if it was ‘Expensive’ (total over 300), ‘Affordable’ (total over 100), or ‘Cheap’

    SELECT order_id,
           SUM(quantity*price) AS Sales_Amount,
           CASE
               WHEN SUM(quantity*price) > 300 THEN 'Expensive'
               WHEN SUM(quantity*price) > 100 THEN 'Affordable'
               ELSE 'Cheap'
           END AS Order_Status
    FROM order_items a
    INNER JOIN products b USING(product_id)
    GROUP BY 1
    ORDER BY 1;

| order_id | sales_amount | order_status |
| -------- | ------------ | ------------ |
| 1        | 35.00        | Cheap        |
| 2        | 75.00        | Cheap        |
| 3        | 50.00        | Cheap        |
| 4        | 80.00        | Cheap        |
| 5        | 50.00        | Cheap        |
| 6        | 55.00        | Cheap        |
| 7        | 85.00        | Cheap        |
| 8        | 145.00       | Affordable   |
| 9        | 140.00       | Affordable   |
| 10       | 285.00       | Affordable   |
| 11       | 275.00       | Affordable   |
| 12       | 80.00        | Cheap        |
| 13       | 185.00       | Affordable   |
| 14       | 145.00       | Affordable   |
| 15       | 225.00       | Affordable   |
| 16       | 340.00       | Expensive    |

---

10)Find customers who have ordered the product with the highest price.


    SELECT customer_id,
           customer_name
    FROM
      (SELECT product_id,
              customer_id,
              first_name||' '||last_name AS customer_name,
              price,
              DENSE_RANK() OVER(
                                ORDER BY price DESC) AS "rank"
       FROM orders a
       INNER JOIN order_items b USING(order_id)
       INNER JOIN products c USING(product_id)
       INNER JOIN customers d USING(customer_id)) AS e
    WHERE "rank" = 1;

| customer_id | customer_name |
| ----------- | ------------- |
| 8           | Ivy Jones     |
| 13          | Sophia Thomas |

---




